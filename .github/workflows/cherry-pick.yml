name: Cherry-pick PR commits to main

on: 
  pull_request:
    branches:
      - dev
    types: [closed]

permissions:
  contents: write
  pull-requests: write

jobs:
  cherry-pick:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
      - name: Cherry-pick and create branch
        id: cherry
        run: |
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          BASE_BRANCH=main
          CHERRY_BRANCH=cherry-pick-${{ github.event.pull_request.number }}

          git fetch origin 
          git checkout -b $CHERRY_BRANCH origin/$BASE_BRANCH
          
          if ! git cherry-pick -x $BASE_SHA..$HEAD_SHA; then
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          git push origin $CHERRY_BRANCH
          echo "cherry_branch=$CHERRY_BRANCH" >> $GITHUB_OUTPUT
          echo "has_conflicts=false" >> $GITHUB_OUTPUT

      - name: Comment on original PR if merge conflicts
        if: steps.cherry.outputs.has_conflicts == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: "❗️ Cherry-pick to `main` failed due to merge conflicts.",
            });

      - name: Create Pull Request using GitHub Script
        if: steps.cherry.outputs.has_conflicts == 'false'
        uses: actions/github-script@v6
        env:
          CHERRY_BRANCH: ${{ steps.cherry.outputs.cherry_branch }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const cherryBranch = '${{ steps.cherry.outputs.cherry_branch }}';
            const baseBranch = 'main';
            const prNumber = context.payload.pull_request.number;
            const originalTitle = context.payload.pull_request.title;

            const match = originalTitle.match(/(TEST-\d+)\s*:/i);
            const prefix = match ? `${match[1]}:` : '';
            const title = `${prefix} Cherry-pick from PR #${prNumber}`;
            const body = `This PR cherry-picks commit(s) from #${prNumber} into \`${baseBranch}\`.`;

            const response = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: cherryBranch,
              base: baseBranch,
              body: body,
            });

            const cherryPickPRNumber = response.data.number;
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: cherryPickPRNumber,
              labels: ['cherry-pick']
            });

            console.log(`Pull request created: ${response.data.html_url}`);